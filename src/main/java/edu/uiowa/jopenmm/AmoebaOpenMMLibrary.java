package edu.uiowa.jopenmm;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;
/**
 * JNA Wrapper for library <b>AmoebaOpenMM</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 *
 * @author mjschnie
 * @version $Id: $Id
 */
public class AmoebaOpenMMLibrary implements Library {
        /** Constant <code>JNA_LIBRARY_NAME="OpenMMAmoeba"</code> */
        public static final String JNA_LIBRARY_NAME = "OpenMMAmoeba";
	// public static final String JNA_LIBRARY_NAME = "AmoebaOpenMM";
	/** Constant <code>JNA_NATIVE_LIB</code> */
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(AmoebaOpenMMLibrary.JNA_LIBRARY_NAME);
	static {
		Native.register(AmoebaOpenMMLibrary.class, AmoebaOpenMMLibrary.JNA_NATIVE_LIB);
	}
	/** enum values */
	public static interface OpenMM_AmoebaVdwForce_NonbondedMethod {
		public static final int OpenMM_AmoebaVdwForce_NoCutoff = 0;
		public static final int OpenMM_AmoebaVdwForce_CutoffPeriodic = 1;
	};
	/** enum values */
	public static interface OpenMM_AmoebaVdwForce_AlchemicalMethod {
		public static final int OpenMM_AmoebaVdwForce_None = 0;
		public static final int OpenMM_AmoebaVdwForce_Decouple = 1;
		public static final int OpenMM_AmoebaVdwForce_Annihilate = 2;
	};
	/** enum values */
	public static interface OpenMM_AmoebaMultipoleForce_NonbondedMethod {
		public static final int OpenMM_AmoebaMultipoleForce_NoCutoff = 0;
		public static final int OpenMM_AmoebaMultipoleForce_PME = 1;
	};
	/** enum values */
	public static interface OpenMM_AmoebaMultipoleForce_PolarizationType {
		public static final int OpenMM_AmoebaMultipoleForce_Mutual = 0;
		public static final int OpenMM_AmoebaMultipoleForce_Direct = 1;
		public static final int OpenMM_AmoebaMultipoleForce_Extrapolated = 2;
	};
	/** enum values */
	public static interface OpenMM_AmoebaMultipoleForce_MultipoleAxisTypes {
		public static final int OpenMM_AmoebaMultipoleForce_ZThenX = 0;
		public static final int OpenMM_AmoebaMultipoleForce_Bisector = 1;
		public static final int OpenMM_AmoebaMultipoleForce_ZBisect = 2;
		public static final int OpenMM_AmoebaMultipoleForce_ThreeFold = 3;
		public static final int OpenMM_AmoebaMultipoleForce_ZOnly = 4;
		public static final int OpenMM_AmoebaMultipoleForce_NoAxisType = 5;
		public static final int OpenMM_AmoebaMultipoleForce_LastAxisTypeIndex = 6;
	};
	/** enum values */
	public static interface OpenMM_AmoebaMultipoleForce_CovalentType {
		public static final int OpenMM_AmoebaMultipoleForce_Covalent12 = 0;
		public static final int OpenMM_AmoebaMultipoleForce_Covalent13 = 1;
		public static final int OpenMM_AmoebaMultipoleForce_Covalent14 = 2;
		public static final int OpenMM_AmoebaMultipoleForce_Covalent15 = 3;
		public static final int OpenMM_AmoebaMultipoleForce_PolarizationCovalent11 = 4;
		public static final int OpenMM_AmoebaMultipoleForce_PolarizationCovalent12 = 5;
		public static final int OpenMM_AmoebaMultipoleForce_PolarizationCovalent13 = 6;
		public static final int OpenMM_AmoebaMultipoleForce_PolarizationCovalent14 = 7;
		public static final int OpenMM_AmoebaMultipoleForce_CovalentEnd = 8;
	};
	/** enum values */
	public static interface OpenMM_HippoNonbondedForce_NonbondedMethod {
		public static final int OpenMM_HippoNonbondedForce_NoCutoff = 0;
		public static final int OpenMM_HippoNonbondedForce_PME = 1;
	};
	/** enum values */
	public static interface OpenMM_HippoNonbondedForce_ParticleAxisTypes {
		public static final int OpenMM_HippoNonbondedForce_ZThenX = 0;
		public static final int OpenMM_HippoNonbondedForce_Bisector = 1;
		public static final int OpenMM_HippoNonbondedForce_ZBisect = 2;
		public static final int OpenMM_HippoNonbondedForce_ThreeFold = 3;
		public static final int OpenMM_HippoNonbondedForce_ZOnly = 4;
		public static final int OpenMM_HippoNonbondedForce_NoAxisType = 5;
	};
	/** Global Constants */
	public static final double OpenMM_NmPerAngstrom = 0.1;
	/** Constant <code>OpenMM_AngstromsPerNm=10.0</code> */
	public static final double OpenMM_AngstromsPerNm = 10.0;
	/** Constant <code>OpenMM_PsPerFs=0.001</code> */
	public static final double OpenMM_PsPerFs = 0.001;
	/** Constant <code>OpenMM_FsPerPs=1000.0</code> */
	public static final double OpenMM_FsPerPs = 1000.0;
	/** Constant <code>OpenMM_KJPerKcal=4.184</code> */
	public static final double OpenMM_KJPerKcal = 4.184;
	/** Constant <code>OpenMM_KcalPerKJ=1.0 / 4.184</code> */
	public static final double OpenMM_KcalPerKJ = 1.0 / 4.184;
	/** Constant <code>OpenMM_RadiansPerDegree=3.1415926535897932385 / 180.0</code> */
	public static final double OpenMM_RadiansPerDegree = 3.1415926535897932385 / 180.0;
	/** Constant <code>OpenMM_DegreesPerRadian=180.0 / 3.1415926535897932385</code> */
	public static final double OpenMM_DegreesPerRadian = 180.0 / 3.1415926535897932385;
	/** Constant <code>OpenMM_SigmaPerVdwRadius=1.7817974362806786095</code> */
	public static final double OpenMM_SigmaPerVdwRadius = 1.7817974362806786095;
	/**
	 * OpenMM_3D_DoubleArray<br>
	 * Original signature : <code>OpenMM_3D_DoubleArray* OpenMM_3D_DoubleArray_create(int, int, int)</code>
	 *
	 * @param size1 a int.
	 * @param size2 a int.
	 * @param size3 a int.
	 * @return a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native PointerByReference OpenMM_3D_DoubleArray_create(int size1, int size2, int size3);
	/**
	 * Original signature : <code>void OpenMM_3D_DoubleArray_set(OpenMM_3D_DoubleArray*, int, int, OpenMM_DoubleArray*)</code>
	 *
	 * @param array a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index1 a int.
	 * @param index2 a int.
	 * @param values a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_3D_DoubleArray_set(PointerByReference array, int index1, int index2, PointerByReference values);
	/**
	 * Original signature : <code>void OpenMM_3D_DoubleArray_destroy(OpenMM_3D_DoubleArray*)</code>
	 *
	 * @param array a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_3D_DoubleArray_destroy(PointerByReference array);
	/**
	 * AmoebaBondForce<br>
	 * Original signature : <code>OpenMM_AmoebaBondForce* OpenMM_AmoebaBondForce_create()</code>
	 *
	 * @return a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native PointerByReference OpenMM_AmoebaBondForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaBondForce_destroy(OpenMM_AmoebaBondForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaBondForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaBondForce_getNumBonds(const OpenMM_AmoebaBondForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaBondForce_getNumBonds(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaBondForce_setAmoebaGlobalBondCubic(OpenMM_AmoebaBondForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param cubicK a double.
	 */
	public static native void OpenMM_AmoebaBondForce_setAmoebaGlobalBondCubic(PointerByReference target, double cubicK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaBondForce_getAmoebaGlobalBondCubic(const OpenMM_AmoebaBondForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaBondForce_getAmoebaGlobalBondCubic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaBondForce_setAmoebaGlobalBondQuartic(OpenMM_AmoebaBondForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param quarticK a double.
	 */
	public static native void OpenMM_AmoebaBondForce_setAmoebaGlobalBondQuartic(PointerByReference target, double quarticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaBondForce_getAmoebaGlobalBondQuartic(const OpenMM_AmoebaBondForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaBondForce_getAmoebaGlobalBondQuartic(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaBondForce_addBond(OpenMM_AmoebaBondForce*, int, int, double, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param particle1 a int.
	 * @param particle2 a int.
	 * @param length a double.
	 * @param quadraticK a double.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaBondForce_addBond(PointerByReference target, int particle1, int particle2, double length, double quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaBondForce_getBondParameters(const OpenMM_AmoebaBondForce*, int, int*, int*, double*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a {@link java.nio.IntBuffer} object.
	 * @param particle2 a {@link java.nio.IntBuffer} object.
	 * @param length a {@link java.nio.DoubleBuffer} object.
	 * @param quadraticK a {@link java.nio.DoubleBuffer} object.
	 */
	public static native void OpenMM_AmoebaBondForce_getBondParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, DoubleBuffer length, DoubleBuffer quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaBondForce_getBondParameters(const OpenMM_AmoebaBondForce*, int, int*, int*, double*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle2 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param length a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param quadraticK a {@link com.sun.jna.ptr.DoubleByReference} object.
	 */
	public static native void OpenMM_AmoebaBondForce_getBondParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, DoubleByReference length, DoubleByReference quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaBondForce_setBondParameters(OpenMM_AmoebaBondForce*, int, int, int, double, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a int.
	 * @param particle2 a int.
	 * @param length a double.
	 * @param quadraticK a double.
	 */
	public static native void OpenMM_AmoebaBondForce_setBondParameters(PointerByReference target, int index, int particle1, int particle2, double length, double quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaBondForce_updateParametersInContext(OpenMM_AmoebaBondForce*, OpenMM_Context*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaBondForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>void OpenMM_AmoebaBondForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaBondForce*, OpenMM_Boolean)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param periodic a int.
	 */
	public static native void OpenMM_AmoebaBondForce_setUsesPeriodicBoundaryConditions(PointerByReference target, int periodic);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaBondForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaBondForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaBondForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaAngleForce<br>
	 * Original signature : <code>OpenMM_AmoebaAngleForce* OpenMM_AmoebaAngleForce_create()</code>
	 *
	 * @return a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native PointerByReference OpenMM_AmoebaAngleForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_destroy(OpenMM_AmoebaAngleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaAngleForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaAngleForce_getNumAngles(const OpenMM_AmoebaAngleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaAngleForce_getNumAngles(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleCubic(OpenMM_AmoebaAngleForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param cubicK a double.
	 */
	public static native void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleCubic(PointerByReference target, double cubicK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleCubic(const OpenMM_AmoebaAngleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleCubic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleQuartic(OpenMM_AmoebaAngleForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param quarticK a double.
	 */
	public static native void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleQuartic(PointerByReference target, double quarticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleQuartic(const OpenMM_AmoebaAngleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleQuartic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_setAmoebaGlobalAnglePentic(OpenMM_AmoebaAngleForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param penticK a double.
	 */
	public static native void OpenMM_AmoebaAngleForce_setAmoebaGlobalAnglePentic(PointerByReference target, double penticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaAngleForce_getAmoebaGlobalAnglePentic(const OpenMM_AmoebaAngleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaAngleForce_getAmoebaGlobalAnglePentic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleSextic(OpenMM_AmoebaAngleForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param sexticK a double.
	 */
	public static native void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleSextic(PointerByReference target, double sexticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleSextic(const OpenMM_AmoebaAngleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleSextic(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaAngleForce_addAngle(OpenMM_AmoebaAngleForce*, int, int, int, double, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param particle1 a int.
	 * @param particle2 a int.
	 * @param particle3 a int.
	 * @param length a double.
	 * @param quadraticK a double.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaAngleForce_addAngle(PointerByReference target, int particle1, int particle2, int particle3, double length, double quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_getAngleParameters(const OpenMM_AmoebaAngleForce*, int, int*, int*, int*, double*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a {@link java.nio.IntBuffer} object.
	 * @param particle2 a {@link java.nio.IntBuffer} object.
	 * @param particle3 a {@link java.nio.IntBuffer} object.
	 * @param length a {@link java.nio.DoubleBuffer} object.
	 * @param quadraticK a {@link java.nio.DoubleBuffer} object.
	 */
	public static native void OpenMM_AmoebaAngleForce_getAngleParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, IntBuffer particle3, DoubleBuffer length, DoubleBuffer quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_getAngleParameters(const OpenMM_AmoebaAngleForce*, int, int*, int*, int*, double*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle2 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle3 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param length a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param quadraticK a {@link com.sun.jna.ptr.DoubleByReference} object.
	 */
	public static native void OpenMM_AmoebaAngleForce_getAngleParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, DoubleByReference length, DoubleByReference quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_setAngleParameters(OpenMM_AmoebaAngleForce*, int, int, int, int, double, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a int.
	 * @param particle2 a int.
	 * @param particle3 a int.
	 * @param length a double.
	 * @param quadraticK a double.
	 */
	public static native void OpenMM_AmoebaAngleForce_setAngleParameters(PointerByReference target, int index, int particle1, int particle2, int particle3, double length, double quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_updateParametersInContext(OpenMM_AmoebaAngleForce*, OpenMM_Context*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaAngleForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaAngleForce*, OpenMM_Boolean)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param periodic a int.
	 */
	public static native void OpenMM_AmoebaAngleForce_setUsesPeriodicBoundaryConditions(PointerByReference target, int periodic);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaAngleForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaAngleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaAngleForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaWcaDispersionForce<br>
	 * Original signature : <code>OpenMM_AmoebaWcaDispersionForce* OpenMM_AmoebaWcaDispersionForce_create()</code>
	 *
	 * @return a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native PointerByReference OpenMM_AmoebaWcaDispersionForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_destroy(OpenMM_AmoebaWcaDispersionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaWcaDispersionForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaWcaDispersionForce_getNumParticles(const OpenMM_AmoebaWcaDispersionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaWcaDispersionForce_getNumParticles(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setParticleParameters(OpenMM_AmoebaWcaDispersionForce*, int, double, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param particleIndex a int.
	 * @param radius a double.
	 * @param epsilon a double.
	 */
	public static native void OpenMM_AmoebaWcaDispersionForce_setParticleParameters(PointerByReference target, int particleIndex, double radius, double epsilon);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(const OpenMM_AmoebaWcaDispersionForce*, int, double*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param particleIndex a int.
	 * @param radius a {@link java.nio.DoubleBuffer} object.
	 * @param epsilon a {@link java.nio.DoubleBuffer} object.
	 */
	public static native void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(PointerByReference target, int particleIndex, DoubleBuffer radius, DoubleBuffer epsilon);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(const OpenMM_AmoebaWcaDispersionForce*, int, double*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param particleIndex a int.
	 * @param radius a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param epsilon a {@link com.sun.jna.ptr.DoubleByReference} object.
	 */
	public static native void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(PointerByReference target, int particleIndex, DoubleByReference radius, DoubleByReference epsilon);
	/**
	 * Original signature : <code>int OpenMM_AmoebaWcaDispersionForce_addParticle(OpenMM_AmoebaWcaDispersionForce*, double, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param radius a double.
	 * @param epsilon a double.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaWcaDispersionForce_addParticle(PointerByReference target, double radius, double epsilon);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_updateParametersInContext(OpenMM_AmoebaWcaDispersionForce*, OpenMM_Context*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaWcaDispersionForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getEpso(const OpenMM_AmoebaWcaDispersionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaWcaDispersionForce_getEpso(PointerByReference target);
	/**
	 * Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getEpsh(const OpenMM_AmoebaWcaDispersionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaWcaDispersionForce_getEpsh(PointerByReference target);
	/**
	 * Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getRmino(const OpenMM_AmoebaWcaDispersionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaWcaDispersionForce_getRmino(PointerByReference target);
	/**
	 * Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getRminh(const OpenMM_AmoebaWcaDispersionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaWcaDispersionForce_getRminh(PointerByReference target);
	/**
	 * Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getAwater(const OpenMM_AmoebaWcaDispersionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaWcaDispersionForce_getAwater(PointerByReference target);
	/**
	 * Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getShctd(const OpenMM_AmoebaWcaDispersionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaWcaDispersionForce_getShctd(PointerByReference target);
	/**
	 * Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getDispoff(const OpenMM_AmoebaWcaDispersionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaWcaDispersionForce_getDispoff(PointerByReference target);
	/**
	 * Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getSlevy(const OpenMM_AmoebaWcaDispersionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaWcaDispersionForce_getSlevy(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setEpso(OpenMM_AmoebaWcaDispersionForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param inputValue a double.
	 */
	public static native void OpenMM_AmoebaWcaDispersionForce_setEpso(PointerByReference target, double inputValue);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setEpsh(OpenMM_AmoebaWcaDispersionForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param inputValue a double.
	 */
	public static native void OpenMM_AmoebaWcaDispersionForce_setEpsh(PointerByReference target, double inputValue);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setRmino(OpenMM_AmoebaWcaDispersionForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param inputValue a double.
	 */
	public static native void OpenMM_AmoebaWcaDispersionForce_setRmino(PointerByReference target, double inputValue);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setRminh(OpenMM_AmoebaWcaDispersionForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param inputValue a double.
	 */
	public static native void OpenMM_AmoebaWcaDispersionForce_setRminh(PointerByReference target, double inputValue);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setAwater(OpenMM_AmoebaWcaDispersionForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param inputValue a double.
	 */
	public static native void OpenMM_AmoebaWcaDispersionForce_setAwater(PointerByReference target, double inputValue);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setShctd(OpenMM_AmoebaWcaDispersionForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param inputValue a double.
	 */
	public static native void OpenMM_AmoebaWcaDispersionForce_setShctd(PointerByReference target, double inputValue);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setDispoff(OpenMM_AmoebaWcaDispersionForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param inputValue a double.
	 */
	public static native void OpenMM_AmoebaWcaDispersionForce_setDispoff(PointerByReference target, double inputValue);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setSlevy(OpenMM_AmoebaWcaDispersionForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param inputValue a double.
	 */
	public static native void OpenMM_AmoebaWcaDispersionForce_setSlevy(PointerByReference target, double inputValue);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaWcaDispersionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaWcaDispersionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaWcaDispersionForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaInPlaneAngleForce<br>
	 * Original signature : <code>OpenMM_AmoebaInPlaneAngleForce* OpenMM_AmoebaInPlaneAngleForce_create()</code>
	 *
	 * @return a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native PointerByReference OpenMM_AmoebaInPlaneAngleForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_destroy(OpenMM_AmoebaInPlaneAngleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaInPlaneAngleForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaInPlaneAngleForce_getNumAngles(const OpenMM_AmoebaInPlaneAngleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaInPlaneAngleForce_getNumAngles(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleCubic(OpenMM_AmoebaInPlaneAngleForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param cubicK a double.
	 */
	public static native void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleCubic(PointerByReference target, double cubicK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleCubic(const OpenMM_AmoebaInPlaneAngleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleCubic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleQuartic(OpenMM_AmoebaInPlaneAngleForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param quarticK a double.
	 */
	public static native void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleQuartic(PointerByReference target, double quarticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleQuartic(const OpenMM_AmoebaInPlaneAngleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleQuartic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAnglePentic(OpenMM_AmoebaInPlaneAngleForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param penticK a double.
	 */
	public static native void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAnglePentic(PointerByReference target, double penticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAnglePentic(const OpenMM_AmoebaInPlaneAngleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAnglePentic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleSextic(OpenMM_AmoebaInPlaneAngleForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param sexticK a double.
	 */
	public static native void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleSextic(PointerByReference target, double sexticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleSextic(const OpenMM_AmoebaInPlaneAngleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleSextic(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaInPlaneAngleForce_addAngle(OpenMM_AmoebaInPlaneAngleForce*, int, int, int, int, double, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param particle1 a int.
	 * @param particle2 a int.
	 * @param particle3 a int.
	 * @param particle4 a int.
	 * @param length a double.
	 * @param quadraticK a double.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaInPlaneAngleForce_addAngle(PointerByReference target, int particle1, int particle2, int particle3, int particle4, double length, double quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_getAngleParameters(const OpenMM_AmoebaInPlaneAngleForce*, int, int*, int*, int*, int*, double*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a {@link java.nio.IntBuffer} object.
	 * @param particle2 a {@link java.nio.IntBuffer} object.
	 * @param particle3 a {@link java.nio.IntBuffer} object.
	 * @param particle4 a {@link java.nio.IntBuffer} object.
	 * @param length a {@link java.nio.DoubleBuffer} object.
	 * @param quadraticK a {@link java.nio.DoubleBuffer} object.
	 */
	public static native void OpenMM_AmoebaInPlaneAngleForce_getAngleParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, IntBuffer particle3, IntBuffer particle4, DoubleBuffer length, DoubleBuffer quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_getAngleParameters(const OpenMM_AmoebaInPlaneAngleForce*, int, int*, int*, int*, int*, double*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle2 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle3 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle4 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param length a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param quadraticK a {@link com.sun.jna.ptr.DoubleByReference} object.
	 */
	public static native void OpenMM_AmoebaInPlaneAngleForce_getAngleParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, IntByReference particle4, DoubleByReference length, DoubleByReference quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setAngleParameters(OpenMM_AmoebaInPlaneAngleForce*, int, int, int, int, int, double, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a int.
	 * @param particle2 a int.
	 * @param particle3 a int.
	 * @param particle4 a int.
	 * @param length a double.
	 * @param quadraticK a double.
	 */
	public static native void OpenMM_AmoebaInPlaneAngleForce_setAngleParameters(PointerByReference target, int index, int particle1, int particle2, int particle3, int particle4, double length, double quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_updateParametersInContext(OpenMM_AmoebaInPlaneAngleForce*, OpenMM_Context*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaInPlaneAngleForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaInPlaneAngleForce*, OpenMM_Boolean)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param periodic a int.
	 */
	public static native void OpenMM_AmoebaInPlaneAngleForce_setUsesPeriodicBoundaryConditions(PointerByReference target, int periodic);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaInPlaneAngleForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaInPlaneAngleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaInPlaneAngleForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaGeneralizedKirkwoodForce<br>
	 * Original signature : <code>OpenMM_AmoebaGeneralizedKirkwoodForce* OpenMM_AmoebaGeneralizedKirkwoodForce_create()</code>
	 *
	 * @return a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native PointerByReference OpenMM_AmoebaGeneralizedKirkwoodForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_destroy(OpenMM_AmoebaGeneralizedKirkwoodForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaGeneralizedKirkwoodForce_getNumParticles(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaGeneralizedKirkwoodForce_getNumParticles(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaGeneralizedKirkwoodForce_addParticle(OpenMM_AmoebaGeneralizedKirkwoodForce*, double, double, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param charge a double.
	 * @param radius a double.
	 * @param scalingFactor a double.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaGeneralizedKirkwoodForce_addParticle(PointerByReference target, double charge, double radius, double scalingFactor);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(const OpenMM_AmoebaGeneralizedKirkwoodForce*, int, double*, double*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param charge a {@link java.nio.DoubleBuffer} object.
	 * @param radius a {@link java.nio.DoubleBuffer} object.
	 * @param scalingFactor a {@link java.nio.DoubleBuffer} object.
	 */
	public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(PointerByReference target, int index, DoubleBuffer charge, DoubleBuffer radius, DoubleBuffer scalingFactor);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(const OpenMM_AmoebaGeneralizedKirkwoodForce*, int, double*, double*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param charge a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param radius a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param scalingFactor a {@link com.sun.jna.ptr.DoubleByReference} object.
	 */
	public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(PointerByReference target, int index, DoubleByReference charge, DoubleByReference radius, DoubleByReference scalingFactor);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setParticleParameters(OpenMM_AmoebaGeneralizedKirkwoodForce*, int, double, double, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param charge a double.
	 * @param radius a double.
	 * @param scalingFactor a double.
	 */
	public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_setParticleParameters(PointerByReference target, int index, double charge, double radius, double scalingFactor);
	/**
	 * Original signature : <code>double OpenMM_AmoebaGeneralizedKirkwoodForce_getSolventDielectric(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaGeneralizedKirkwoodForce_getSolventDielectric(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setSolventDielectric(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param dielectric a double.
	 */
	public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_setSolventDielectric(PointerByReference target, double dielectric);
	/**
	 * Original signature : <code>double OpenMM_AmoebaGeneralizedKirkwoodForce_getSoluteDielectric(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaGeneralizedKirkwoodForce_getSoluteDielectric(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setSoluteDielectric(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param dielectric a double.
	 */
	public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_setSoluteDielectric(PointerByReference target, double dielectric);
	/**
	 * Original signature : <code>int OpenMM_AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm(OpenMM_AmoebaGeneralizedKirkwoodForce*, int)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param includeCavityTerm a int.
	 */
	public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm(PointerByReference target, int includeCavityTerm);
	/**
	 * Original signature : <code>double OpenMM_AmoebaGeneralizedKirkwoodForce_getProbeRadius(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaGeneralizedKirkwoodForce_getProbeRadius(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setProbeRadius(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param probeRadius a double.
	 */
	public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_setProbeRadius(PointerByReference target, double probeRadius);
	/**
	 * Original signature : <code>double OpenMM_AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param surfaceAreaFactor a double.
	 */
	public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor(PointerByReference target, double surfaceAreaFactor);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_updateParametersInContext(OpenMM_AmoebaGeneralizedKirkwoodForce*, OpenMM_Context*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaGeneralizedKirkwoodForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaGeneralizedKirkwoodForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaTorsionTorsionForce<br>
	 * Original signature : <code>OpenMM_AmoebaTorsionTorsionForce* OpenMM_AmoebaTorsionTorsionForce_create()</code>
	 *
	 * @return a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native PointerByReference OpenMM_AmoebaTorsionTorsionForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_destroy(OpenMM_AmoebaTorsionTorsionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaTorsionTorsionForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsions(const OpenMM_AmoebaTorsionTorsionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsions(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids(const OpenMM_AmoebaTorsionTorsionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaTorsionTorsionForce_addTorsionTorsion(OpenMM_AmoebaTorsionTorsionForce*, int, int, int, int, int, int, int)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param particle1 a int.
	 * @param particle2 a int.
	 * @param particle3 a int.
	 * @param particle4 a int.
	 * @param particle5 a int.
	 * @param chiralCheckAtomIndex a int.
	 * @param gridIndex a int.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaTorsionTorsionForce_addTorsionTorsion(PointerByReference target, int particle1, int particle2, int particle3, int particle4, int particle5, int chiralCheckAtomIndex, int gridIndex);
	/**
	 * Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(const OpenMM_AmoebaTorsionTorsionForce*, int, int*, int*, int*, int*, int*, int*, int*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a {@link java.nio.IntBuffer} object.
	 * @param particle2 a {@link java.nio.IntBuffer} object.
	 * @param particle3 a {@link java.nio.IntBuffer} object.
	 * @param particle4 a {@link java.nio.IntBuffer} object.
	 * @param particle5 a {@link java.nio.IntBuffer} object.
	 * @param chiralCheckAtomIndex a {@link java.nio.IntBuffer} object.
	 * @param gridIndex a {@link java.nio.IntBuffer} object.
	 */
	public static native void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, IntBuffer particle3, IntBuffer particle4, IntBuffer particle5, IntBuffer chiralCheckAtomIndex, IntBuffer gridIndex);
	/**
	 * Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(const OpenMM_AmoebaTorsionTorsionForce*, int, int*, int*, int*, int*, int*, int*, int*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle2 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle3 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle4 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle5 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param chiralCheckAtomIndex a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param gridIndex a {@link com.sun.jna.ptr.IntByReference} object.
	 */
	public static native void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, IntByReference particle4, IntByReference particle5, IntByReference chiralCheckAtomIndex, IntByReference gridIndex);
	/**
	 * Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionParameters(OpenMM_AmoebaTorsionTorsionForce*, int, int, int, int, int, int, int, int)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a int.
	 * @param particle2 a int.
	 * @param particle3 a int.
	 * @param particle4 a int.
	 * @param particle5 a int.
	 * @param chiralCheckAtomIndex a int.
	 * @param gridIndex a int.
	 */
	public static native void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionParameters(PointerByReference target, int index, int particle1, int particle2, int particle3, int particle4, int particle5, int chiralCheckAtomIndex, int gridIndex);
	/**
	 * Original signature : <code>OpenMM_3D_DoubleArray* OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionGrid(const OpenMM_AmoebaTorsionTorsionForce*, int)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @return a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native PointerByReference OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionGrid(PointerByReference target, int index);
	/**
	 * Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionGrid(OpenMM_AmoebaTorsionTorsionForce*, int, const OpenMM_3D_DoubleArray*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param grid a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionGrid(PointerByReference target, int index, PointerByReference grid);
	/**
	 * Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaTorsionTorsionForce*, OpenMM_Boolean)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param periodic a int.
	 */
	public static native void OpenMM_AmoebaTorsionTorsionForce_setUsesPeriodicBoundaryConditions(PointerByReference target, int periodic);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaTorsionTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaTorsionTorsionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaTorsionTorsionForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaPiTorsionForce<br>
	 * Original signature : <code>OpenMM_AmoebaPiTorsionForce* OpenMM_AmoebaPiTorsionForce_create()</code>
	 *
	 * @return a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native PointerByReference OpenMM_AmoebaPiTorsionForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaPiTorsionForce_destroy(OpenMM_AmoebaPiTorsionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaPiTorsionForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaPiTorsionForce_getNumPiTorsions(const OpenMM_AmoebaPiTorsionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaPiTorsionForce_getNumPiTorsions(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaPiTorsionForce_addPiTorsion(OpenMM_AmoebaPiTorsionForce*, int, int, int, int, int, int, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param particle1 a int.
	 * @param particle2 a int.
	 * @param particle3 a int.
	 * @param particle4 a int.
	 * @param particle5 a int.
	 * @param particle6 a int.
	 * @param k a double.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaPiTorsionForce_addPiTorsion(PointerByReference target, int particle1, int particle2, int particle3, int particle4, int particle5, int particle6, double k);
	/**
	 * Original signature : <code>void OpenMM_AmoebaPiTorsionForce_getPiTorsionParameters(const OpenMM_AmoebaPiTorsionForce*, int, int*, int*, int*, int*, int*, int*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a {@link java.nio.IntBuffer} object.
	 * @param particle2 a {@link java.nio.IntBuffer} object.
	 * @param particle3 a {@link java.nio.IntBuffer} object.
	 * @param particle4 a {@link java.nio.IntBuffer} object.
	 * @param particle5 a {@link java.nio.IntBuffer} object.
	 * @param particle6 a {@link java.nio.IntBuffer} object.
	 * @param k a {@link java.nio.DoubleBuffer} object.
	 */
	public static native void OpenMM_AmoebaPiTorsionForce_getPiTorsionParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, IntBuffer particle3, IntBuffer particle4, IntBuffer particle5, IntBuffer particle6, DoubleBuffer k);
	/**
	 * Original signature : <code>void OpenMM_AmoebaPiTorsionForce_getPiTorsionParameters(const OpenMM_AmoebaPiTorsionForce*, int, int*, int*, int*, int*, int*, int*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle2 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle3 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle4 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle5 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle6 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param k a {@link com.sun.jna.ptr.DoubleByReference} object.
	 */
	public static native void OpenMM_AmoebaPiTorsionForce_getPiTorsionParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, IntByReference particle4, IntByReference particle5, IntByReference particle6, DoubleByReference k);
	/**
	 * Original signature : <code>void OpenMM_AmoebaPiTorsionForce_setPiTorsionParameters(OpenMM_AmoebaPiTorsionForce*, int, int, int, int, int, int, int, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a int.
	 * @param particle2 a int.
	 * @param particle3 a int.
	 * @param particle4 a int.
	 * @param particle5 a int.
	 * @param particle6 a int.
	 * @param k a double.
	 */
	public static native void OpenMM_AmoebaPiTorsionForce_setPiTorsionParameters(PointerByReference target, int index, int particle1, int particle2, int particle3, int particle4, int particle5, int particle6, double k);
	/**
	 * Original signature : <code>void OpenMM_AmoebaPiTorsionForce_updateParametersInContext(OpenMM_AmoebaPiTorsionForce*, OpenMM_Context*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaPiTorsionForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>void OpenMM_AmoebaPiTorsionForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaPiTorsionForce*, OpenMM_Boolean)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param periodic a int.
	 */
	public static native void OpenMM_AmoebaPiTorsionForce_setUsesPeriodicBoundaryConditions(PointerByReference target, int periodic);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaPiTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaPiTorsionForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaPiTorsionForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaOutOfPlaneBendForce<br>
	 * Original signature : <code>OpenMM_AmoebaOutOfPlaneBendForce* OpenMM_AmoebaOutOfPlaneBendForce_create()</code>
	 *
	 * @return a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native PointerByReference OpenMM_AmoebaOutOfPlaneBendForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_destroy(OpenMM_AmoebaOutOfPlaneBendForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaOutOfPlaneBendForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends(const OpenMM_AmoebaOutOfPlaneBendForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic(OpenMM_AmoebaOutOfPlaneBendForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param cubicK a double.
	 */
	public static native void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic(PointerByReference target, double cubicK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic(const OpenMM_AmoebaOutOfPlaneBendForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic(OpenMM_AmoebaOutOfPlaneBendForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param quarticK a double.
	 */
	public static native void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic(PointerByReference target, double quarticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic(const OpenMM_AmoebaOutOfPlaneBendForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic(OpenMM_AmoebaOutOfPlaneBendForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param penticK a double.
	 */
	public static native void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic(PointerByReference target, double penticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic(const OpenMM_AmoebaOutOfPlaneBendForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic(OpenMM_AmoebaOutOfPlaneBendForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param sexticK a double.
	 */
	public static native void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic(PointerByReference target, double sexticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic(const OpenMM_AmoebaOutOfPlaneBendForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaOutOfPlaneBendForce_addOutOfPlaneBend(OpenMM_AmoebaOutOfPlaneBendForce*, int, int, int, int, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param particle1 a int.
	 * @param particle2 a int.
	 * @param particle3 a int.
	 * @param particle4 a int.
	 * @param k a double.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaOutOfPlaneBendForce_addOutOfPlaneBend(PointerByReference target, int particle1, int particle2, int particle3, int particle4, double k);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(const OpenMM_AmoebaOutOfPlaneBendForce*, int, int*, int*, int*, int*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a {@link java.nio.IntBuffer} object.
	 * @param particle2 a {@link java.nio.IntBuffer} object.
	 * @param particle3 a {@link java.nio.IntBuffer} object.
	 * @param particle4 a {@link java.nio.IntBuffer} object.
	 * @param k a {@link java.nio.DoubleBuffer} object.
	 */
	public static native void OpenMM_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, IntBuffer particle3, IntBuffer particle4, DoubleBuffer k);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(const OpenMM_AmoebaOutOfPlaneBendForce*, int, int*, int*, int*, int*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle2 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle3 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle4 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param k a {@link com.sun.jna.ptr.DoubleByReference} object.
	 */
	public static native void OpenMM_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, IntByReference particle4, DoubleByReference k);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters(OpenMM_AmoebaOutOfPlaneBendForce*, int, int, int, int, int, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a int.
	 * @param particle2 a int.
	 * @param particle3 a int.
	 * @param particle4 a int.
	 * @param k a double.
	 */
	public static native void OpenMM_AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters(PointerByReference target, int index, int particle1, int particle2, int particle3, int particle4, double k);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_updateParametersInContext(OpenMM_AmoebaOutOfPlaneBendForce*, OpenMM_Context*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaOutOfPlaneBendForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaOutOfPlaneBendForce*, OpenMM_Boolean)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param periodic a int.
	 */
	public static native void OpenMM_AmoebaOutOfPlaneBendForce_setUsesPeriodicBoundaryConditions(PointerByReference target, int periodic);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaOutOfPlaneBendForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaOutOfPlaneBendForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaOutOfPlaneBendForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaStretchBendForce<br>
	 * Original signature : <code>OpenMM_AmoebaStretchBendForce* OpenMM_AmoebaStretchBendForce_create()</code>
	 *
	 * @return a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native PointerByReference OpenMM_AmoebaStretchBendForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaStretchBendForce_destroy(OpenMM_AmoebaStretchBendForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaStretchBendForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaStretchBendForce_getNumStretchBends(const OpenMM_AmoebaStretchBendForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaStretchBendForce_getNumStretchBends(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaStretchBendForce_addStretchBend(OpenMM_AmoebaStretchBendForce*, int, int, int, double, double, double, double, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param particle1 a int.
	 * @param particle2 a int.
	 * @param particle3 a int.
	 * @param lengthAB a double.
	 * @param lengthCB a double.
	 * @param angle a double.
	 * @param k1 a double.
	 * @param k2 a double.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaStretchBendForce_addStretchBend(PointerByReference target, int particle1, int particle2, int particle3, double lengthAB, double lengthCB, double angle, double k1, double k2);
	/**
	 * Original signature : <code>void OpenMM_AmoebaStretchBendForce_getStretchBendParameters(const OpenMM_AmoebaStretchBendForce*, int, int*, int*, int*, double*, double*, double*, double*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a {@link java.nio.IntBuffer} object.
	 * @param particle2 a {@link java.nio.IntBuffer} object.
	 * @param particle3 a {@link java.nio.IntBuffer} object.
	 * @param lengthAB a {@link java.nio.DoubleBuffer} object.
	 * @param lengthCB a {@link java.nio.DoubleBuffer} object.
	 * @param angle a {@link java.nio.DoubleBuffer} object.
	 * @param k1 a {@link java.nio.DoubleBuffer} object.
	 * @param k2 a {@link java.nio.DoubleBuffer} object.
	 */
	public static native void OpenMM_AmoebaStretchBendForce_getStretchBendParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, IntBuffer particle3, DoubleBuffer lengthAB, DoubleBuffer lengthCB, DoubleBuffer angle, DoubleBuffer k1, DoubleBuffer k2);
	/**
	 * Original signature : <code>void OpenMM_AmoebaStretchBendForce_getStretchBendParameters(const OpenMM_AmoebaStretchBendForce*, int, int*, int*, int*, double*, double*, double*, double*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle2 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle3 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param lengthAB a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param lengthCB a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param angle a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param k1 a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param k2 a {@link com.sun.jna.ptr.DoubleByReference} object.
	 */
	public static native void OpenMM_AmoebaStretchBendForce_getStretchBendParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, DoubleByReference lengthAB, DoubleByReference lengthCB, DoubleByReference angle, DoubleByReference k1, DoubleByReference k2);
	/**
	 * Original signature : <code>void OpenMM_AmoebaStretchBendForce_setStretchBendParameters(OpenMM_AmoebaStretchBendForce*, int, int, int, int, double, double, double, double, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a int.
	 * @param particle2 a int.
	 * @param particle3 a int.
	 * @param lengthAB a double.
	 * @param lengthCB a double.
	 * @param angle a double.
	 * @param k1 a double.
	 * @param k2 a double.
	 */
	public static native void OpenMM_AmoebaStretchBendForce_setStretchBendParameters(PointerByReference target, int index, int particle1, int particle2, int particle3, double lengthAB, double lengthCB, double angle, double k1, double k2);
	/**
	 * Original signature : <code>void OpenMM_AmoebaStretchBendForce_updateParametersInContext(OpenMM_AmoebaStretchBendForce*, OpenMM_Context*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaStretchBendForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>void OpenMM_AmoebaStretchBendForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaStretchBendForce*, OpenMM_Boolean)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param periodic a int.
	 */
	public static native void OpenMM_AmoebaStretchBendForce_setUsesPeriodicBoundaryConditions(PointerByReference target, int periodic);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaStretchBendForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaStretchBendForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaStretchBendForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * Original signature : <code>OpenMM_AmoebaVdwForce* OpenMM_AmoebaVdwForce_create()</code>
	 *
	 * @return a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native PointerByReference OpenMM_AmoebaVdwForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_destroy(OpenMM_AmoebaVdwForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaVdwForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>char* OpenMM_AmoebaVdwForce_Lambda()</code>
	 *
	 * @return a {@link com.sun.jna.Pointer} object.
	 */
	public static native Pointer OpenMM_AmoebaVdwForce_Lambda();
	/**
	 * Original signature : <code>int OpenMM_AmoebaVdwForce_getNumParticles(const OpenMM_AmoebaVdwForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaVdwForce_getNumParticles(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setParticleParameters(OpenMM_AmoebaVdwForce*, int, int, double, double, double, OpenMM_Boolean)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param particleIndex a int.
	 * @param parentIndex a int.
	 * @param sigma a double.
	 * @param epsilon a double.
	 * @param reductionFactor a double.
	 * @param isAlchemical a int.
	 */
	public static native void OpenMM_AmoebaVdwForce_setParticleParameters(PointerByReference target, int particleIndex, int parentIndex, double sigma, double epsilon, double reductionFactor, int isAlchemical);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_getParticleParameters(const OpenMM_AmoebaVdwForce*, int, int*, double*, double*, double*, OpenMM_Boolean*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param particleIndex a int.
	 * @param parentIndex a {@link java.nio.IntBuffer} object.
	 * @param sigma a {@link java.nio.DoubleBuffer} object.
	 * @param epsilon a {@link java.nio.DoubleBuffer} object.
	 * @param reductionFactor a {@link java.nio.DoubleBuffer} object.
	 * @param isAlchemical a {@link java.nio.IntBuffer} object.
	 */
	public static native void OpenMM_AmoebaVdwForce_getParticleParameters(PointerByReference target, int particleIndex, IntBuffer parentIndex, DoubleBuffer sigma, DoubleBuffer epsilon, DoubleBuffer reductionFactor, IntBuffer isAlchemical);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_getParticleParameters(const OpenMM_AmoebaVdwForce*, int, int*, double*, double*, double*, OpenMM_Boolean*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param particleIndex a int.
	 * @param parentIndex a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param sigma a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param epsilon a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param reductionFactor a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param isAlchemical a {@link com.sun.jna.ptr.IntByReference} object.
	 */
	public static native void OpenMM_AmoebaVdwForce_getParticleParameters(PointerByReference target, int particleIndex, IntByReference parentIndex, DoubleByReference sigma, DoubleByReference epsilon, DoubleByReference reductionFactor, IntByReference isAlchemical);
	/**
	 * Original signature : <code>int OpenMM_AmoebaVdwForce_addParticle(OpenMM_AmoebaVdwForce*, int, double, double, double, OpenMM_Boolean)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param parentIndex a int.
	 * @param sigma a double.
	 * @param epsilon a double.
	 * @param reductionFactor a double.
	 * @param isAlchemical a int.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaVdwForce_addParticle(PointerByReference target, int parentIndex, double sigma, double epsilon, double reductionFactor, int isAlchemical);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(OpenMM_AmoebaVdwForce*, const char*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param sigmaCombiningRule a {@link java.lang.String} object.
	 */
	public static native void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(PointerByReference target, String sigmaCombiningRule);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(OpenMM_AmoebaVdwForce*, const char*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param sigmaCombiningRule a {@link com.sun.jna.Pointer} object.
	 */
	public static native void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(PointerByReference target, Pointer sigmaCombiningRule);
	/**
	 * Original signature : <code>char* OpenMM_AmoebaVdwForce_getSigmaCombiningRule(const OpenMM_AmoebaVdwForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a {@link com.sun.jna.Pointer} object.
	 */
	public static native Pointer OpenMM_AmoebaVdwForce_getSigmaCombiningRule(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(OpenMM_AmoebaVdwForce*, const char*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param epsilonCombiningRule a {@link java.lang.String} object.
	 */
	public static native void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(PointerByReference target, String epsilonCombiningRule);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(OpenMM_AmoebaVdwForce*, const char*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param epsilonCombiningRule a {@link com.sun.jna.Pointer} object.
	 */
	public static native void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(PointerByReference target, Pointer epsilonCombiningRule);
	/**
	 * Original signature : <code>char* OpenMM_AmoebaVdwForce_getEpsilonCombiningRule(const OpenMM_AmoebaVdwForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a {@link com.sun.jna.Pointer} object.
	 */
	public static native Pointer OpenMM_AmoebaVdwForce_getEpsilonCombiningRule(PointerByReference target);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaVdwForce_getUseDispersionCorrection(const OpenMM_AmoebaVdwForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaVdwForce_getUseDispersionCorrection(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setUseDispersionCorrection(OpenMM_AmoebaVdwForce*, OpenMM_Boolean)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param useCorrection a int.
	 */
	public static native void OpenMM_AmoebaVdwForce_setUseDispersionCorrection(PointerByReference target, int useCorrection);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setParticleExclusions(OpenMM_AmoebaVdwForce*, int, const OpenMM_IntArray*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param particleIndex a int.
	 * @param exclusions a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaVdwForce_setParticleExclusions(PointerByReference target, int particleIndex, PointerByReference exclusions);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_getParticleExclusions(const OpenMM_AmoebaVdwForce*, int, OpenMM_IntArray*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param particleIndex a int.
	 * @param exclusions a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaVdwForce_getParticleExclusions(PointerByReference target, int particleIndex, PointerByReference exclusions);
	/**
	 * Original signature : <code>double OpenMM_AmoebaVdwForce_getCutoffDistance(const OpenMM_AmoebaVdwForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaVdwForce_getCutoffDistance(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setCutoffDistance(OpenMM_AmoebaVdwForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param distance a double.
	 */
	public static native void OpenMM_AmoebaVdwForce_setCutoffDistance(PointerByReference target, double distance);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setCutoff(OpenMM_AmoebaVdwForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param cutoff a double.
	 */
	public static native void OpenMM_AmoebaVdwForce_setCutoff(PointerByReference target, double cutoff);
	/**
	 * Original signature : <code>double OpenMM_AmoebaVdwForce_getCutoff(const OpenMM_AmoebaVdwForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaVdwForce_getCutoff(PointerByReference target);
	/**
	 * Original signature : <code>OpenMM_AmoebaVdwForce_NonbondedMethod OpenMM_AmoebaVdwForce_getNonbondedMethod(const OpenMM_AmoebaVdwForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaVdwForce_getNonbondedMethod(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setNonbondedMethod(OpenMM_AmoebaVdwForce*, OpenMM_AmoebaVdwForce_NonbondedMethod)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param method a int.
	 */
	public static native void OpenMM_AmoebaVdwForce_setNonbondedMethod(PointerByReference target, int method);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setSoftcorePower(OpenMM_AmoebaVdwForce*, int)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param n a int.
	 */
	public static native void OpenMM_AmoebaVdwForce_setSoftcorePower(PointerByReference target, int n);
	/**
	 * Original signature : <code>int OpenMM_AmoebaVdwForce_getSoftcorePower(const OpenMM_AmoebaVdwForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaVdwForce_getSoftcorePower(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setSoftcoreAlpha(OpenMM_AmoebaVdwForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param alpha a double.
	 */
	public static native void OpenMM_AmoebaVdwForce_setSoftcoreAlpha(PointerByReference target, double alpha);
	/**
	 * Original signature : <code>double OpenMM_AmoebaVdwForce_getSoftcoreAlpha(const OpenMM_AmoebaVdwForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaVdwForce_getSoftcoreAlpha(PointerByReference target);
	/**
	 * Original signature : <code>OpenMM_AmoebaVdwForce_AlchemicalMethod OpenMM_AmoebaVdwForce_getAlchemicalMethod(const OpenMM_AmoebaVdwForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaVdwForce_getAlchemicalMethod(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setAlchemicalMethod(OpenMM_AmoebaVdwForce*, OpenMM_AmoebaVdwForce_AlchemicalMethod)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param method a int.
	 */
	public static native void OpenMM_AmoebaVdwForce_setAlchemicalMethod(PointerByReference target, int method);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_updateParametersInContext(OpenMM_AmoebaVdwForce*, OpenMM_Context*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaVdwForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaVdwForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaVdwForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaVdwForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * Original signature : <code>OpenMM_AmoebaMultipoleForce* OpenMM_AmoebaMultipoleForce_create()</code>
	 *
	 * @return a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native PointerByReference OpenMM_AmoebaMultipoleForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_destroy(OpenMM_AmoebaMultipoleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaMultipoleForce_getNumMultipoles(const OpenMM_AmoebaMultipoleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaMultipoleForce_getNumMultipoles(PointerByReference target);
	/**
	 * Original signature : <code>OpenMM_AmoebaMultipoleForce_NonbondedMethod OpenMM_AmoebaMultipoleForce_getNonbondedMethod(const OpenMM_AmoebaMultipoleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaMultipoleForce_getNonbondedMethod(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setNonbondedMethod(OpenMM_AmoebaMultipoleForce*, OpenMM_AmoebaMultipoleForce_NonbondedMethod)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param method a int.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_setNonbondedMethod(PointerByReference target, int method);
	/**
	 * Original signature : <code>OpenMM_AmoebaMultipoleForce_PolarizationType OpenMM_AmoebaMultipoleForce_getPolarizationType(const OpenMM_AmoebaMultipoleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaMultipoleForce_getPolarizationType(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setPolarizationType(OpenMM_AmoebaMultipoleForce*, OpenMM_AmoebaMultipoleForce_PolarizationType)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param type a int.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_setPolarizationType(PointerByReference target, int type);
	/**
	 * Original signature : <code>double OpenMM_AmoebaMultipoleForce_getCutoffDistance(const OpenMM_AmoebaMultipoleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaMultipoleForce_getCutoffDistance(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setCutoffDistance(OpenMM_AmoebaMultipoleForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param distance a double.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_setCutoffDistance(PointerByReference target, double distance);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getPMEParameters(const OpenMM_AmoebaMultipoleForce*, double*, int*, int*, int*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param alpha a {@link java.nio.DoubleBuffer} object.
	 * @param nx a {@link java.nio.IntBuffer} object.
	 * @param ny a {@link java.nio.IntBuffer} object.
	 * @param nz a {@link java.nio.IntBuffer} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_getPMEParameters(PointerByReference target, DoubleBuffer alpha, IntBuffer nx, IntBuffer ny, IntBuffer nz);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getPMEParameters(const OpenMM_AmoebaMultipoleForce*, double*, int*, int*, int*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param alpha a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param nx a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param ny a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param nz a {@link com.sun.jna.ptr.IntByReference} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_getPMEParameters(PointerByReference target, DoubleByReference alpha, IntByReference nx, IntByReference ny, IntByReference nz);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setPMEParameters(OpenMM_AmoebaMultipoleForce*, double, int, int, int)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param alpha a double.
	 * @param nx a int.
	 * @param ny a int.
	 * @param nz a int.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_setPMEParameters(PointerByReference target, double alpha, int nx, int ny, int nz);
	/**
	 * Original signature : <code>double OpenMM_AmoebaMultipoleForce_getAEwald(const OpenMM_AmoebaMultipoleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaMultipoleForce_getAEwald(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setAEwald(OpenMM_AmoebaMultipoleForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param aewald a double.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_setAEwald(PointerByReference target, double aewald);
	/**
	 * Original signature : <code>int OpenMM_AmoebaMultipoleForce_getPmeBSplineOrder(const OpenMM_AmoebaMultipoleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaMultipoleForce_getPmeBSplineOrder(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getPmeGridDimensions(const OpenMM_AmoebaMultipoleForce*, OpenMM_IntArray*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param gridDimension a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_getPmeGridDimensions(PointerByReference target, PointerByReference gridDimension);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setPmeGridDimensions(OpenMM_AmoebaMultipoleForce*, const OpenMM_IntArray*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param gridDimension a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_setPmeGridDimensions(PointerByReference target, PointerByReference gridDimension);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(const OpenMM_AmoebaMultipoleForce*, const OpenMM_Context*, double*, int*, int*, int*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param alpha a {@link java.nio.DoubleBuffer} object.
	 * @param nx a {@link java.nio.IntBuffer} object.
	 * @param ny a {@link java.nio.IntBuffer} object.
	 * @param nz a {@link java.nio.IntBuffer} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(PointerByReference target, PointerByReference context, DoubleBuffer alpha, IntBuffer nx, IntBuffer ny, IntBuffer nz);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(const OpenMM_AmoebaMultipoleForce*, const OpenMM_Context*, double*, int*, int*, int*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param alpha a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param nx a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param ny a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param nz a {@link com.sun.jna.ptr.IntByReference} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(PointerByReference target, PointerByReference context, DoubleByReference alpha, IntByReference nx, IntByReference ny, IntByReference nz);
	/**
	 * Original signature : <code>int OpenMM_AmoebaMultipoleForce_addMultipole(OpenMM_AmoebaMultipoleForce*, double, const OpenMM_DoubleArray*, const OpenMM_DoubleArray*, int, int, int, int, double, double, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param charge a double.
	 * @param molecularDipole a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param molecularQuadrupole a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param axisType a int.
	 * @param multipoleAtomZ a int.
	 * @param multipoleAtomX a int.
	 * @param multipoleAtomY a int.
	 * @param thole a double.
	 * @param dampingFactor a double.
	 * @param polarity a double.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaMultipoleForce_addMultipole(PointerByReference target, double charge, PointerByReference molecularDipole, PointerByReference molecularQuadrupole, int axisType, int multipoleAtomZ, int multipoleAtomX, int multipoleAtomY, double thole, double dampingFactor, double polarity);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(const OpenMM_AmoebaMultipoleForce*, int, double*, OpenMM_DoubleArray*, OpenMM_DoubleArray*, int*, int*, int*, int*, double*, double*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param charge a {@link java.nio.DoubleBuffer} object.
	 * @param molecularDipole a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param molecularQuadrupole a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param axisType a {@link java.nio.IntBuffer} object.
	 * @param multipoleAtomZ a {@link java.nio.IntBuffer} object.
	 * @param multipoleAtomX a {@link java.nio.IntBuffer} object.
	 * @param multipoleAtomY a {@link java.nio.IntBuffer} object.
	 * @param thole a {@link java.nio.DoubleBuffer} object.
	 * @param dampingFactor a {@link java.nio.DoubleBuffer} object.
	 * @param polarity a {@link java.nio.DoubleBuffer} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(PointerByReference target, int index, DoubleBuffer charge, PointerByReference molecularDipole, PointerByReference molecularQuadrupole, IntBuffer axisType, IntBuffer multipoleAtomZ, IntBuffer multipoleAtomX, IntBuffer multipoleAtomY, DoubleBuffer thole, DoubleBuffer dampingFactor, DoubleBuffer polarity);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(const OpenMM_AmoebaMultipoleForce*, int, double*, OpenMM_DoubleArray*, OpenMM_DoubleArray*, int*, int*, int*, int*, double*, double*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param charge a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param molecularDipole a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param molecularQuadrupole a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param axisType a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param multipoleAtomZ a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param multipoleAtomX a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param multipoleAtomY a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param thole a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param dampingFactor a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param polarity a {@link com.sun.jna.ptr.DoubleByReference} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(PointerByReference target, int index, DoubleByReference charge, PointerByReference molecularDipole, PointerByReference molecularQuadrupole, IntByReference axisType, IntByReference multipoleAtomZ, IntByReference multipoleAtomX, IntByReference multipoleAtomY, DoubleByReference thole, DoubleByReference dampingFactor, DoubleByReference polarity);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setMultipoleParameters(OpenMM_AmoebaMultipoleForce*, int, double, const OpenMM_DoubleArray*, const OpenMM_DoubleArray*, int, int, int, int, double, double, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param charge a double.
	 * @param molecularDipole a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param molecularQuadrupole a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param axisType a int.
	 * @param multipoleAtomZ a int.
	 * @param multipoleAtomX a int.
	 * @param multipoleAtomY a int.
	 * @param thole a double.
	 * @param dampingFactor a double.
	 * @param polarity a double.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_setMultipoleParameters(PointerByReference target, int index, double charge, PointerByReference molecularDipole, PointerByReference molecularQuadrupole, int axisType, int multipoleAtomZ, int multipoleAtomX, int multipoleAtomY, double thole, double dampingFactor, double polarity);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setCovalentMap(OpenMM_AmoebaMultipoleForce*, int, OpenMM_AmoebaMultipoleForce_CovalentType, const OpenMM_IntArray*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param typeId a int.
	 * @param covalentAtoms a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_setCovalentMap(PointerByReference target, int index, int typeId, PointerByReference covalentAtoms);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getCovalentMap(const OpenMM_AmoebaMultipoleForce*, int, OpenMM_AmoebaMultipoleForce_CovalentType, OpenMM_IntArray*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param typeId a int.
	 * @param covalentAtoms a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_getCovalentMap(PointerByReference target, int index, int typeId, PointerByReference covalentAtoms);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getCovalentMaps(const OpenMM_AmoebaMultipoleForce*, int, OpenMM_2D_IntArray*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param covalentLists a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_getCovalentMaps(PointerByReference target, int index, PointerByReference covalentLists);
	/**
	 * Original signature : <code>int OpenMM_AmoebaMultipoleForce_getMutualInducedMaxIterations(const OpenMM_AmoebaMultipoleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaMultipoleForce_getMutualInducedMaxIterations(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setMutualInducedMaxIterations(OpenMM_AmoebaMultipoleForce*, int)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param inputMutualInducedMaxIterations a int.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_setMutualInducedMaxIterations(PointerByReference target, int inputMutualInducedMaxIterations);
	/**
	 * Original signature : <code>double OpenMM_AmoebaMultipoleForce_getMutualInducedTargetEpsilon(const OpenMM_AmoebaMultipoleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaMultipoleForce_getMutualInducedTargetEpsilon(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setMutualInducedTargetEpsilon(OpenMM_AmoebaMultipoleForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param inputMutualInducedTargetEpsilon a double.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_setMutualInducedTargetEpsilon(PointerByReference target, double inputMutualInducedTargetEpsilon);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setExtrapolationCoefficients(OpenMM_AmoebaMultipoleForce*, const OpenMM_DoubleArray*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param coefficients a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_setExtrapolationCoefficients(PointerByReference target, PointerByReference coefficients);
	/**
	 * Original signature : <code>OpenMM_DoubleArray* OpenMM_AmoebaMultipoleForce_getExtrapolationCoefficients(const OpenMM_AmoebaMultipoleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native PointerByReference OpenMM_AmoebaMultipoleForce_getExtrapolationCoefficients(PointerByReference target);
	/**
	 * Original signature : <code>double OpenMM_AmoebaMultipoleForce_getEwaldErrorTolerance(const OpenMM_AmoebaMultipoleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_AmoebaMultipoleForce_getEwaldErrorTolerance(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setEwaldErrorTolerance(OpenMM_AmoebaMultipoleForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param tol a double.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_setEwaldErrorTolerance(PointerByReference target, double tol);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getLabFramePermanentDipoles(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_Vec3Array*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param dipoles a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_getLabFramePermanentDipoles(PointerByReference target, PointerByReference context, PointerByReference dipoles);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getInducedDipoles(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_Vec3Array*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param dipoles a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_getInducedDipoles(PointerByReference target, PointerByReference context, PointerByReference dipoles);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getTotalDipoles(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_Vec3Array*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param dipoles a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_getTotalDipoles(PointerByReference target, PointerByReference context, PointerByReference dipoles);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getElectrostaticPotential(OpenMM_AmoebaMultipoleForce*, const OpenMM_Vec3Array*, OpenMM_Context*, OpenMM_DoubleArray*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param inputGrid a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param outputElectrostaticPotential a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_getElectrostaticPotential(PointerByReference target, PointerByReference inputGrid, PointerByReference context, PointerByReference outputElectrostaticPotential);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getSystemMultipoleMoments(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_DoubleArray*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param outputMultipoleMoments a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_getSystemMultipoleMoments(PointerByReference target, PointerByReference context, PointerByReference outputMultipoleMoments);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_updateParametersInContext(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_AmoebaMultipoleForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaMultipoleForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaMultipoleForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_AmoebaMultipoleForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * Original signature : <code>OpenMM_HippoNonbondedForce* OpenMM_HippoNonbondedForce_create()</code>
	 *
	 * @return a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native PointerByReference OpenMM_HippoNonbondedForce_create();
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_destroy(OpenMM_HippoNonbondedForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_HippoNonbondedForce_getNumParticles(const OpenMM_HippoNonbondedForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_HippoNonbondedForce_getNumParticles(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_HippoNonbondedForce_getNumExceptions(const OpenMM_HippoNonbondedForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_HippoNonbondedForce_getNumExceptions(PointerByReference target);
	/**
	 * Original signature : <code>OpenMM_HippoNonbondedForce_NonbondedMethod OpenMM_HippoNonbondedForce_getNonbondedMethod(const OpenMM_HippoNonbondedForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_HippoNonbondedForce_getNonbondedMethod(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_setNonbondedMethod(OpenMM_HippoNonbondedForce*, OpenMM_HippoNonbondedForce_NonbondedMethod)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param method a int.
	 */
	public static native void OpenMM_HippoNonbondedForce_setNonbondedMethod(PointerByReference target, int method);
	/**
	 * Original signature : <code>double OpenMM_HippoNonbondedForce_getCutoffDistance(const OpenMM_HippoNonbondedForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_HippoNonbondedForce_getCutoffDistance(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_setCutoffDistance(OpenMM_HippoNonbondedForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param distance a double.
	 */
	public static native void OpenMM_HippoNonbondedForce_setCutoffDistance(PointerByReference target, double distance);
	/**
	 * Original signature : <code>double OpenMM_HippoNonbondedForce_getSwitchingDistance(const OpenMM_HippoNonbondedForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_HippoNonbondedForce_getSwitchingDistance(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_setSwitchingDistance(OpenMM_HippoNonbondedForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param distance a double.
	 */
	public static native void OpenMM_HippoNonbondedForce_setSwitchingDistance(PointerByReference target, double distance);
	/**
	 * Original signature : <code>OpenMM_DoubleArray* OpenMM_HippoNonbondedForce_getExtrapolationCoefficients(const OpenMM_HippoNonbondedForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native PointerByReference OpenMM_HippoNonbondedForce_getExtrapolationCoefficients(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_setExtrapolationCoefficients(OpenMM_HippoNonbondedForce*, const OpenMM_DoubleArray*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param coefficients a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_setExtrapolationCoefficients(PointerByReference target, PointerByReference coefficients);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_getPMEParameters(const OpenMM_HippoNonbondedForce*, double*, int*, int*, int*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param alpha a {@link java.nio.DoubleBuffer} object.
	 * @param nx a {@link java.nio.IntBuffer} object.
	 * @param ny a {@link java.nio.IntBuffer} object.
	 * @param nz a {@link java.nio.IntBuffer} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_getPMEParameters(PointerByReference target, DoubleBuffer alpha, IntBuffer nx, IntBuffer ny, IntBuffer nz);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_getPMEParameters(const OpenMM_HippoNonbondedForce*, double*, int*, int*, int*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param alpha a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param nx a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param ny a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param nz a {@link com.sun.jna.ptr.IntByReference} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_getPMEParameters(PointerByReference target, DoubleByReference alpha, IntByReference nx, IntByReference ny, IntByReference nz);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_getDPMEParameters(const OpenMM_HippoNonbondedForce*, double*, int*, int*, int*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param alpha a {@link java.nio.DoubleBuffer} object.
	 * @param nx a {@link java.nio.IntBuffer} object.
	 * @param ny a {@link java.nio.IntBuffer} object.
	 * @param nz a {@link java.nio.IntBuffer} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_getDPMEParameters(PointerByReference target, DoubleBuffer alpha, IntBuffer nx, IntBuffer ny, IntBuffer nz);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_getDPMEParameters(const OpenMM_HippoNonbondedForce*, double*, int*, int*, int*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param alpha a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param nx a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param ny a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param nz a {@link com.sun.jna.ptr.IntByReference} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_getDPMEParameters(PointerByReference target, DoubleByReference alpha, IntByReference nx, IntByReference ny, IntByReference nz);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_setPMEParameters(OpenMM_HippoNonbondedForce*, double, int, int, int)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param alpha a double.
	 * @param nx a int.
	 * @param ny a int.
	 * @param nz a int.
	 */
	public static native void OpenMM_HippoNonbondedForce_setPMEParameters(PointerByReference target, double alpha, int nx, int ny, int nz);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_setDPMEParameters(OpenMM_HippoNonbondedForce*, double, int, int, int)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param alpha a double.
	 * @param nx a int.
	 * @param ny a int.
	 * @param nz a int.
	 */
	public static native void OpenMM_HippoNonbondedForce_setDPMEParameters(PointerByReference target, double alpha, int nx, int ny, int nz);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_getPMEParametersInContext(const OpenMM_HippoNonbondedForce*, const OpenMM_Context*, double*, int*, int*, int*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param alpha a {@link java.nio.DoubleBuffer} object.
	 * @param nx a {@link java.nio.IntBuffer} object.
	 * @param ny a {@link java.nio.IntBuffer} object.
	 * @param nz a {@link java.nio.IntBuffer} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_getPMEParametersInContext(PointerByReference target, PointerByReference context, DoubleBuffer alpha, IntBuffer nx, IntBuffer ny, IntBuffer nz);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_getPMEParametersInContext(const OpenMM_HippoNonbondedForce*, const OpenMM_Context*, double*, int*, int*, int*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param alpha a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param nx a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param ny a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param nz a {@link com.sun.jna.ptr.IntByReference} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_getPMEParametersInContext(PointerByReference target, PointerByReference context, DoubleByReference alpha, IntByReference nx, IntByReference ny, IntByReference nz);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_getDPMEParametersInContext(const OpenMM_HippoNonbondedForce*, const OpenMM_Context*, double*, int*, int*, int*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param alpha a {@link java.nio.DoubleBuffer} object.
	 * @param nx a {@link java.nio.IntBuffer} object.
	 * @param ny a {@link java.nio.IntBuffer} object.
	 * @param nz a {@link java.nio.IntBuffer} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_getDPMEParametersInContext(PointerByReference target, PointerByReference context, DoubleBuffer alpha, IntBuffer nx, IntBuffer ny, IntBuffer nz);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_getDPMEParametersInContext(const OpenMM_HippoNonbondedForce*, const OpenMM_Context*, double*, int*, int*, int*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param alpha a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param nx a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param ny a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param nz a {@link com.sun.jna.ptr.IntByReference} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_getDPMEParametersInContext(PointerByReference target, PointerByReference context, DoubleByReference alpha, IntByReference nx, IntByReference ny, IntByReference nz);
	/**
	 * Original signature : <code>int OpenMM_HippoNonbondedForce_addParticle(OpenMM_HippoNonbondedForce*, double, const OpenMM_DoubleArray*, const OpenMM_DoubleArray*, double, double, double, double, double, double, double, double, double, int, int, int, int)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param charge a double.
	 * @param dipole a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param quadrupole a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param coreCharge a double.
	 * @param alpha a double.
	 * @param epsilon a double.
	 * @param damping a double.
	 * @param c6 a double.
	 * @param pauliK a double.
	 * @param pauliQ a double.
	 * @param pauliAlpha a double.
	 * @param polarizability a double.
	 * @param axisType a int.
	 * @param multipoleAtomZ a int.
	 * @param multipoleAtomX a int.
	 * @param multipoleAtomY a int.
	 * @return a int.
	 */
	public static native int OpenMM_HippoNonbondedForce_addParticle(PointerByReference target, double charge, PointerByReference dipole, PointerByReference quadrupole, double coreCharge, double alpha, double epsilon, double damping, double c6, double pauliK, double pauliQ, double pauliAlpha, double polarizability, int axisType, int multipoleAtomZ, int multipoleAtomX, int multipoleAtomY);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_getParticleParameters(const OpenMM_HippoNonbondedForce*, int, double*, OpenMM_DoubleArray*, OpenMM_DoubleArray*, double*, double*, double*, double*, double*, double*, double*, double*, double*, int*, int*, int*, int*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param charge a {@link java.nio.DoubleBuffer} object.
	 * @param dipole a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param quadrupole a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param coreCharge a {@link java.nio.DoubleBuffer} object.
	 * @param alpha a {@link java.nio.DoubleBuffer} object.
	 * @param epsilon a {@link java.nio.DoubleBuffer} object.
	 * @param damping a {@link java.nio.DoubleBuffer} object.
	 * @param c6 a {@link java.nio.DoubleBuffer} object.
	 * @param pauliK a {@link java.nio.DoubleBuffer} object.
	 * @param pauliQ a {@link java.nio.DoubleBuffer} object.
	 * @param pauliAlpha a {@link java.nio.DoubleBuffer} object.
	 * @param polarizability a {@link java.nio.DoubleBuffer} object.
	 * @param axisType a {@link java.nio.IntBuffer} object.
	 * @param multipoleAtomZ a {@link java.nio.IntBuffer} object.
	 * @param multipoleAtomX a {@link java.nio.IntBuffer} object.
	 * @param multipoleAtomY a {@link java.nio.IntBuffer} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_getParticleParameters(PointerByReference target, int index, DoubleBuffer charge, PointerByReference dipole, PointerByReference quadrupole, DoubleBuffer coreCharge, DoubleBuffer alpha, DoubleBuffer epsilon, DoubleBuffer damping, DoubleBuffer c6, DoubleBuffer pauliK, DoubleBuffer pauliQ, DoubleBuffer pauliAlpha, DoubleBuffer polarizability, IntBuffer axisType, IntBuffer multipoleAtomZ, IntBuffer multipoleAtomX, IntBuffer multipoleAtomY);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_getParticleParameters(const OpenMM_HippoNonbondedForce*, int, double*, OpenMM_DoubleArray*, OpenMM_DoubleArray*, double*, double*, double*, double*, double*, double*, double*, double*, double*, int*, int*, int*, int*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param charge a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param dipole a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param quadrupole a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param coreCharge a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param alpha a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param epsilon a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param damping a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param c6 a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param pauliK a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param pauliQ a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param pauliAlpha a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param polarizability a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param axisType a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param multipoleAtomZ a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param multipoleAtomX a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param multipoleAtomY a {@link com.sun.jna.ptr.IntByReference} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_getParticleParameters(PointerByReference target, int index, DoubleByReference charge, PointerByReference dipole, PointerByReference quadrupole, DoubleByReference coreCharge, DoubleByReference alpha, DoubleByReference epsilon, DoubleByReference damping, DoubleByReference c6, DoubleByReference pauliK, DoubleByReference pauliQ, DoubleByReference pauliAlpha, DoubleByReference polarizability, IntByReference axisType, IntByReference multipoleAtomZ, IntByReference multipoleAtomX, IntByReference multipoleAtomY);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_setParticleParameters(OpenMM_HippoNonbondedForce*, int, double, const OpenMM_DoubleArray*, const OpenMM_DoubleArray*, double, double, double, double, double, double, double, double, double, int, int, int, int)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param charge a double.
	 * @param dipole a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param quadrupole a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param coreCharge a double.
	 * @param alpha a double.
	 * @param epsilon a double.
	 * @param damping a double.
	 * @param c6 a double.
	 * @param pauliK a double.
	 * @param pauliQ a double.
	 * @param pauliAlpha a double.
	 * @param polarizability a double.
	 * @param axisType a int.
	 * @param multipoleAtomZ a int.
	 * @param multipoleAtomX a int.
	 * @param multipoleAtomY a int.
	 */
	public static native void OpenMM_HippoNonbondedForce_setParticleParameters(PointerByReference target, int index, double charge, PointerByReference dipole, PointerByReference quadrupole, double coreCharge, double alpha, double epsilon, double damping, double c6, double pauliK, double pauliQ, double pauliAlpha, double polarizability, int axisType, int multipoleAtomZ, int multipoleAtomX, int multipoleAtomY);
	/**
	 * Original signature : <code>int OpenMM_HippoNonbondedForce_addException(OpenMM_HippoNonbondedForce*, int, int, double, double, double, double, double, double, OpenMM_Boolean)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param particle1 a int.
	 * @param particle2 a int.
	 * @param multipoleMultipoleScale a double.
	 * @param dipoleMultipoleScale a double.
	 * @param dipoleDipoleScale a double.
	 * @param dispersionScale a double.
	 * @param repulsionScale a double.
	 * @param chargeTransferScale a double.
	 * @param replace a int.
	 * @return a int.
	 */
	public static native int OpenMM_HippoNonbondedForce_addException(PointerByReference target, int particle1, int particle2, double multipoleMultipoleScale, double dipoleMultipoleScale, double dipoleDipoleScale, double dispersionScale, double repulsionScale, double chargeTransferScale, int replace);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_getExceptionParameters(const OpenMM_HippoNonbondedForce*, int, int*, int*, double*, double*, double*, double*, double*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a {@link java.nio.IntBuffer} object.
	 * @param particle2 a {@link java.nio.IntBuffer} object.
	 * @param multipoleMultipoleScale a {@link java.nio.DoubleBuffer} object.
	 * @param dipoleMultipoleScale a {@link java.nio.DoubleBuffer} object.
	 * @param dipoleDipoleScale a {@link java.nio.DoubleBuffer} object.
	 * @param dispersionScale a {@link java.nio.DoubleBuffer} object.
	 * @param repulsionScale a {@link java.nio.DoubleBuffer} object.
	 * @param chargeTransferScale a {@link java.nio.DoubleBuffer} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_getExceptionParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, DoubleBuffer multipoleMultipoleScale, DoubleBuffer dipoleMultipoleScale, DoubleBuffer dipoleDipoleScale, DoubleBuffer dispersionScale, DoubleBuffer repulsionScale, DoubleBuffer chargeTransferScale);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_getExceptionParameters(const OpenMM_HippoNonbondedForce*, int, int*, int*, double*, double*, double*, double*, double*, double*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param particle2 a {@link com.sun.jna.ptr.IntByReference} object.
	 * @param multipoleMultipoleScale a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param dipoleMultipoleScale a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param dipoleDipoleScale a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param dispersionScale a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param repulsionScale a {@link com.sun.jna.ptr.DoubleByReference} object.
	 * @param chargeTransferScale a {@link com.sun.jna.ptr.DoubleByReference} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_getExceptionParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, DoubleByReference multipoleMultipoleScale, DoubleByReference dipoleMultipoleScale, DoubleByReference dipoleDipoleScale, DoubleByReference dispersionScale, DoubleByReference repulsionScale, DoubleByReference chargeTransferScale);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_setExceptionParameters(OpenMM_HippoNonbondedForce*, int, int, int, double, double, double, double, double, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param index a int.
	 * @param particle1 a int.
	 * @param particle2 a int.
	 * @param multipoleMultipoleScale a double.
	 * @param dipoleMultipoleScale a double.
	 * @param dipoleDipoleScale a double.
	 * @param dispersionScale a double.
	 * @param repulsionScale a double.
	 * @param chargeTransferScale a double.
	 */
	public static native void OpenMM_HippoNonbondedForce_setExceptionParameters(PointerByReference target, int index, int particle1, int particle2, double multipoleMultipoleScale, double dipoleMultipoleScale, double dipoleDipoleScale, double dispersionScale, double repulsionScale, double chargeTransferScale);
	/**
	 * Original signature : <code>double OpenMM_HippoNonbondedForce_getEwaldErrorTolerance(const OpenMM_HippoNonbondedForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a double.
	 */
	public static native double OpenMM_HippoNonbondedForce_getEwaldErrorTolerance(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_setEwaldErrorTolerance(OpenMM_HippoNonbondedForce*, double)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param tol a double.
	 */
	public static native void OpenMM_HippoNonbondedForce_setEwaldErrorTolerance(PointerByReference target, double tol);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_getLabFramePermanentDipoles(OpenMM_HippoNonbondedForce*, OpenMM_Context*, OpenMM_Vec3Array*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param dipoles a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_getLabFramePermanentDipoles(PointerByReference target, PointerByReference context, PointerByReference dipoles);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_getInducedDipoles(OpenMM_HippoNonbondedForce*, OpenMM_Context*, OpenMM_Vec3Array*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param dipoles a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_getInducedDipoles(PointerByReference target, PointerByReference context, PointerByReference dipoles);
	/**
	 * Original signature : <code>void OpenMM_HippoNonbondedForce_updateParametersInContext(OpenMM_HippoNonbondedForce*, OpenMM_Context*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @param context a {@link com.sun.jna.ptr.PointerByReference} object.
	 */
	public static native void OpenMM_HippoNonbondedForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_HippoNonbondedForce_usesPeriodicBoundaryConditions(const OpenMM_HippoNonbondedForce*)</code>
	 *
	 * @param target a {@link com.sun.jna.ptr.PointerByReference} object.
	 * @return a int.
	 */
	public static native int OpenMM_HippoNonbondedForce_usesPeriodicBoundaryConditions(PointerByReference target);
	public static class OpenMM_3D_DoubleArray extends PointerType {
		public OpenMM_3D_DoubleArray(Pointer address) {
			super(address);
		}
		public OpenMM_3D_DoubleArray() {
			super();
		}
	};
	public static class OpenMM_2D_IntArray extends PointerType {
		public OpenMM_2D_IntArray(Pointer address) {
			super(address);
		}
		public OpenMM_2D_IntArray() {
			super();
		}
	};
	public static class OpenMM_AmoebaInPlaneAngleForce extends PointerType {
		public OpenMM_AmoebaInPlaneAngleForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaInPlaneAngleForce() {
			super();
		}
	};
	public static class OpenMM_HippoNonbondedForce extends PointerType {
		public OpenMM_HippoNonbondedForce(Pointer address) {
			super(address);
		}
		public OpenMM_HippoNonbondedForce() {
			super();
		}
	};
	public static class OpenMM_AmoebaAngleForce extends PointerType {
		public OpenMM_AmoebaAngleForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaAngleForce() {
			super();
		}
	};
	public static class OpenMM_AmoebaPiTorsionForce extends PointerType {
		public OpenMM_AmoebaPiTorsionForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaPiTorsionForce() {
			super();
		}
	};
	public static class OpenMM_Context extends PointerType {
		public OpenMM_Context(Pointer address) {
			super(address);
		}
		public OpenMM_Context() {
			super();
		}
	};
	public static class OpenMM_AmoebaMultipoleForce extends PointerType {
		public OpenMM_AmoebaMultipoleForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaMultipoleForce() {
			super();
		}
	};
	public static class OpenMM_Vec3Array extends PointerType {
		public OpenMM_Vec3Array(Pointer address) {
			super(address);
		}
		public OpenMM_Vec3Array() {
			super();
		}
	};
	public static class OpenMM_AmoebaWcaDispersionForce extends PointerType {
		public OpenMM_AmoebaWcaDispersionForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaWcaDispersionForce() {
			super();
		}
	};
	public static class OpenMM_AmoebaOutOfPlaneBendForce extends PointerType {
		public OpenMM_AmoebaOutOfPlaneBendForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaOutOfPlaneBendForce() {
			super();
		}
	};
	public static class OpenMM_IntArray extends PointerType {
		public OpenMM_IntArray(Pointer address) {
			super(address);
		}
		public OpenMM_IntArray() {
			super();
		}
	};
	public static class OpenMM_DoubleArray extends PointerType {
		public OpenMM_DoubleArray(Pointer address) {
			super(address);
		}
		public OpenMM_DoubleArray() {
			super();
		}
	};
	public static class OpenMM_AmoebaGeneralizedKirkwoodForce extends PointerType {
		public OpenMM_AmoebaGeneralizedKirkwoodForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaGeneralizedKirkwoodForce() {
			super();
		}
	};
	public static class OpenMM_AmoebaBondForce extends PointerType {
		public OpenMM_AmoebaBondForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaBondForce() {
			super();
		}
	};
	public static class OpenMM_AmoebaTorsionTorsionForce extends PointerType {
		public OpenMM_AmoebaTorsionTorsionForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaTorsionTorsionForce() {
			super();
		}
	};
	public static class OpenMM_AmoebaStretchBendForce extends PointerType {
		public OpenMM_AmoebaStretchBendForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaStretchBendForce() {
			super();
		}
	};
	public static class OpenMM_AmoebaVdwForce extends PointerType {
		public OpenMM_AmoebaVdwForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaVdwForce() {
			super();
		}
	};
}
